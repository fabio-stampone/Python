{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tarefa 01\n",
    "\n",
    "- Leia os enunciados com atenção\n",
    "- Saiba que pode haver mais de uma resposta correta\n",
    "- Insira novas células de código sempre que achar necessário\n",
    "- Em caso de dúvidas, procure os tutores\n",
    "- Divirta-se :)\n",
    "\n",
    "#### 1)  crie uma série do pandas a partir de uma lista com os dados abaixo:\n",
    "\n",
    "Em um estudo sobre alteração na tempreatura global, A NASA disponibiliza dados de diferenças de de temperatura média da superfície terrestre relativos às médias de temperatura entre 1951 e 1980. Os dados originais podem ser vistos no site da NASA/GISS, e estão dispostos a cada década na tabela abaixo.\n",
    "\n",
    "|ano|anomalia termica|\n",
    "|:-:|:----:|\n",
    "| 1900 | -0.08 |\n",
    "| 1920 | -0.27 |\n",
    "| 1940 | 0.12 |\n",
    "| 1960 | -0.03 |\n",
    "| 1980 | 0.26 |\n",
    "| 2000 | 0.40 |\n",
    "| 2020 | 1.02 |\n",
    "\n",
    "Crie uma séries do Pandas a partir de uma lista com esses dados."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    -0.08\n",
      "1    -0.27\n",
      "2     0.12\n",
      "3    -0.03\n",
      "4     0.26\n",
      "5     0.40\n",
      "6     1.02\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Seu código aqui\n",
    "\n",
    "dados = ['-0.08', '-0.27', '0.12', '-0.03', '0.26', '0.40', '1.02']\n",
    "serie = pd.Series(dados)\n",
    "print(serie)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2) Coloque os anos nos índices conforme a tabela."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1900    -0.08\n",
      "1920    -0.27\n",
      "1940     0.12\n",
      "1960    -0.03\n",
      "1980     0.26\n",
      "2000     0.40\n",
      "2020     1.02\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# seu código aqui\n",
    "indice = ['1900', '1920', '1940', '1960', '1980', '2000', '2020']\n",
    "anos_indice = pd.Series(dados, index = indice)    \n",
    "print(anos_indice)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3) A partir do dicionário abaixo, crie uma séries do Pandas:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1900   -0.08\n",
      "1920   -0.27\n",
      "1940    0.12\n",
      "1960   -0.03\n",
      "1980    0.26\n",
      "2000    0.40\n",
      "2020    1.02\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "dic_temperaturas = {1900: -.08, 1920: -.27, 1940: .12, 1960: -.03, 1980: .26, 2000: .40, 2020: 1.02}\n",
    "\n",
    "# seu código aqui\n",
    "\n",
    "serie_dict = pd.Series(dic_temperaturas)\n",
    "print(serie_dict)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4) Transforme o ndarray abaixo em um dataframe. \n",
    "O numpy é capaz de gerar arrays n-dimensionais com números pseudo-aleatórios de acordo com uma variedade de distribuições, como no exemplo abaixo. Transforme esse nd-array em um DataFrame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             0           1           2\n",
      "0   102.913934  103.952749  102.395570\n",
      "1    94.851466  102.976658   83.674077\n",
      "2    87.951811   91.061506   75.888584\n",
      "3   108.096546   95.770205  103.874355\n",
      "4    93.684305   77.731147  110.385315\n",
      "5   117.283423  109.077601  113.797549\n",
      "6   127.018207  108.603230   92.589272\n",
      "7   110.116388   90.885371   79.134532\n",
      "8    93.421087  106.263699   92.434028\n",
      "9    90.896944  109.443367   88.355214\n",
      "10   96.399427   95.468685  102.498855\n",
      "11  111.221945   89.742749   90.413137\n",
      "12   97.293091  103.349637   93.120360\n",
      "13   94.843991  101.066126   94.046357\n",
      "14  112.761126  120.614037  102.250936\n",
      "15  113.238115  111.146043   95.664039\n",
      "16   97.659483  103.797798  105.363052\n",
      "17   90.449188   87.594994   89.887576\n",
      "18  102.599342   93.287136   92.185481\n",
      "19  108.631924   99.871255  109.032156\n"
     ]
    }
   ],
   "source": [
    "arr = np.random.normal(100, 10, (20,3))\n",
    "\n",
    "# seu código aqui\n",
    "df = pd.DataFrame(arr)\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 5) Nomeie os índices das linhas com inteiros de 1 a 20, e as colunas com os nomes \"x1\", \"x2\", e \"x3\" respectivamente."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            x1          x2          x3\n",
      "1   102.913934  103.952749  102.395570\n",
      "2    94.851466  102.976658   83.674077\n",
      "3    87.951811   91.061506   75.888584\n",
      "4   108.096546   95.770205  103.874355\n",
      "5    93.684305   77.731147  110.385315\n",
      "6   117.283423  109.077601  113.797549\n",
      "7   127.018207  108.603230   92.589272\n",
      "8   110.116388   90.885371   79.134532\n",
      "9    93.421087  106.263699   92.434028\n",
      "10   90.896944  109.443367   88.355214\n",
      "11   96.399427   95.468685  102.498855\n",
      "12  111.221945   89.742749   90.413137\n",
      "13   97.293091  103.349637   93.120360\n",
      "14   94.843991  101.066126   94.046357\n",
      "15  112.761126  120.614037  102.250936\n",
      "16  113.238115  111.146043   95.664039\n",
      "17   97.659483  103.797798  105.363052\n",
      "18   90.449188   87.594994   89.887576\n",
      "19  102.599342   93.287136   92.185481\n",
      "20  108.631924   99.871255  109.032156\n"
     ]
    }
   ],
   "source": [
    "#seu código aqui\n",
    "df = pd.DataFrame(arr, index=range(1, 21), columns=['x1', 'x2', 'x3'])\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 6) No DataFrame do exercício 5, crie uma nova coluna como sendo a média das três colunas, e dê a ela o nome de \"media\" (não recomendo colocar acentos em nomes de variáveis)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x1</th>\n",
       "      <th>x2</th>\n",
       "      <th>x3</th>\n",
       "      <th>Area</th>\n",
       "      <th>Media</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>102.913934</td>\n",
       "      <td>103.952749</td>\n",
       "      <td>102.395570</td>\n",
       "      <td>137.565198</td>\n",
       "      <td>111.706863</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>94.851466</td>\n",
       "      <td>102.976658</td>\n",
       "      <td>83.674077</td>\n",
       "      <td>126.805421</td>\n",
       "      <td>102.076906</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>87.951811</td>\n",
       "      <td>91.061506</td>\n",
       "      <td>75.888584</td>\n",
       "      <td>114.802853</td>\n",
       "      <td>92.426189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>108.096546</td>\n",
       "      <td>95.770205</td>\n",
       "      <td>103.874355</td>\n",
       "      <td>136.558160</td>\n",
       "      <td>111.074816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>93.684305</td>\n",
       "      <td>77.731147</td>\n",
       "      <td>110.385315</td>\n",
       "      <td>122.502831</td>\n",
       "      <td>101.075900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>117.283423</td>\n",
       "      <td>109.077601</td>\n",
       "      <td>113.797549</td>\n",
       "      <td>151.113029</td>\n",
       "      <td>122.817901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>127.018207</td>\n",
       "      <td>108.603230</td>\n",
       "      <td>92.589272</td>\n",
       "      <td>148.673809</td>\n",
       "      <td>119.221130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>110.116388</td>\n",
       "      <td>90.885371</td>\n",
       "      <td>79.134532</td>\n",
       "      <td>126.879057</td>\n",
       "      <td>101.753837</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>93.421087</td>\n",
       "      <td>106.263699</td>\n",
       "      <td>92.434028</td>\n",
       "      <td>130.653736</td>\n",
       "      <td>105.693138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>90.896944</td>\n",
       "      <td>109.443367</td>\n",
       "      <td>88.355214</td>\n",
       "      <td>129.621894</td>\n",
       "      <td>104.579355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>96.399427</td>\n",
       "      <td>95.468685</td>\n",
       "      <td>102.498855</td>\n",
       "      <td>130.100341</td>\n",
       "      <td>106.116827</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>111.221945</td>\n",
       "      <td>89.742749</td>\n",
       "      <td>90.413137</td>\n",
       "      <td>130.620059</td>\n",
       "      <td>105.499473</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>97.293091</td>\n",
       "      <td>103.349637</td>\n",
       "      <td>93.120360</td>\n",
       "      <td>131.361484</td>\n",
       "      <td>106.281143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>94.843991</td>\n",
       "      <td>101.066126</td>\n",
       "      <td>94.046357</td>\n",
       "      <td>129.303844</td>\n",
       "      <td>104.815080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>112.761126</td>\n",
       "      <td>120.614037</td>\n",
       "      <td>102.250936</td>\n",
       "      <td>150.771227</td>\n",
       "      <td>121.599332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>113.238115</td>\n",
       "      <td>111.146043</td>\n",
       "      <td>95.664039</td>\n",
       "      <td>144.080092</td>\n",
       "      <td>116.032072</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>97.659483</td>\n",
       "      <td>103.797798</td>\n",
       "      <td>105.363052</td>\n",
       "      <td>135.849658</td>\n",
       "      <td>110.667498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>90.449188</td>\n",
       "      <td>87.594994</td>\n",
       "      <td>89.887576</td>\n",
       "      <td>118.984616</td>\n",
       "      <td>96.729094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>102.599342</td>\n",
       "      <td>93.287136</td>\n",
       "      <td>92.185481</td>\n",
       "      <td>128.671733</td>\n",
       "      <td>104.185923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>108.631924</td>\n",
       "      <td>99.871255</td>\n",
       "      <td>109.032156</td>\n",
       "      <td>140.595641</td>\n",
       "      <td>114.532744</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            x1          x2          x3        Area       Media\n",
       "1   102.913934  103.952749  102.395570  137.565198  111.706863\n",
       "2    94.851466  102.976658   83.674077  126.805421  102.076906\n",
       "3    87.951811   91.061506   75.888584  114.802853   92.426189\n",
       "4   108.096546   95.770205  103.874355  136.558160  111.074816\n",
       "5    93.684305   77.731147  110.385315  122.502831  101.075900\n",
       "6   117.283423  109.077601  113.797549  151.113029  122.817901\n",
       "7   127.018207  108.603230   92.589272  148.673809  119.221130\n",
       "8   110.116388   90.885371   79.134532  126.879057  101.753837\n",
       "9    93.421087  106.263699   92.434028  130.653736  105.693138\n",
       "10   90.896944  109.443367   88.355214  129.621894  104.579355\n",
       "11   96.399427   95.468685  102.498855  130.100341  106.116827\n",
       "12  111.221945   89.742749   90.413137  130.620059  105.499473\n",
       "13   97.293091  103.349637   93.120360  131.361484  106.281143\n",
       "14   94.843991  101.066126   94.046357  129.303844  104.815080\n",
       "15  112.761126  120.614037  102.250936  150.771227  121.599332\n",
       "16  113.238115  111.146043   95.664039  144.080092  116.032072\n",
       "17   97.659483  103.797798  105.363052  135.849658  110.667498\n",
       "18   90.449188   87.594994   89.887576  118.984616   96.729094\n",
       "19  102.599342   93.287136   92.185481  128.671733  104.185923\n",
       "20  108.631924   99.871255  109.032156  140.595641  114.532744"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# seu código aqui\n",
    "df['Media'] = df.mean(axis=1)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 7) No DataFrame do exercício 6, crie uma nova coluna chamada \"log_med\", contendo o logaritmo natural da média calculada no exercício 6 <br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x1</th>\n",
       "      <th>x2</th>\n",
       "      <th>x3</th>\n",
       "      <th>Area</th>\n",
       "      <th>Media</th>\n",
       "      <th>log_med</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>102.913934</td>\n",
       "      <td>103.952749</td>\n",
       "      <td>102.395570</td>\n",
       "      <td>137.565198</td>\n",
       "      <td>111.706863</td>\n",
       "      <td>4.715878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>94.851466</td>\n",
       "      <td>102.976658</td>\n",
       "      <td>83.674077</td>\n",
       "      <td>126.805421</td>\n",
       "      <td>102.076906</td>\n",
       "      <td>4.625727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>87.951811</td>\n",
       "      <td>91.061506</td>\n",
       "      <td>75.888584</td>\n",
       "      <td>114.802853</td>\n",
       "      <td>92.426189</td>\n",
       "      <td>4.526410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>108.096546</td>\n",
       "      <td>95.770205</td>\n",
       "      <td>103.874355</td>\n",
       "      <td>136.558160</td>\n",
       "      <td>111.074816</td>\n",
       "      <td>4.710204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>93.684305</td>\n",
       "      <td>77.731147</td>\n",
       "      <td>110.385315</td>\n",
       "      <td>122.502831</td>\n",
       "      <td>101.075900</td>\n",
       "      <td>4.615872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>117.283423</td>\n",
       "      <td>109.077601</td>\n",
       "      <td>113.797549</td>\n",
       "      <td>151.113029</td>\n",
       "      <td>122.817901</td>\n",
       "      <td>4.810703</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>127.018207</td>\n",
       "      <td>108.603230</td>\n",
       "      <td>92.589272</td>\n",
       "      <td>148.673809</td>\n",
       "      <td>119.221130</td>\n",
       "      <td>4.780980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>110.116388</td>\n",
       "      <td>90.885371</td>\n",
       "      <td>79.134532</td>\n",
       "      <td>126.879057</td>\n",
       "      <td>101.753837</td>\n",
       "      <td>4.622557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>93.421087</td>\n",
       "      <td>106.263699</td>\n",
       "      <td>92.434028</td>\n",
       "      <td>130.653736</td>\n",
       "      <td>105.693138</td>\n",
       "      <td>4.660540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>90.896944</td>\n",
       "      <td>109.443367</td>\n",
       "      <td>88.355214</td>\n",
       "      <td>129.621894</td>\n",
       "      <td>104.579355</td>\n",
       "      <td>4.649946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>96.399427</td>\n",
       "      <td>95.468685</td>\n",
       "      <td>102.498855</td>\n",
       "      <td>130.100341</td>\n",
       "      <td>106.116827</td>\n",
       "      <td>4.664541</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>111.221945</td>\n",
       "      <td>89.742749</td>\n",
       "      <td>90.413137</td>\n",
       "      <td>130.620059</td>\n",
       "      <td>105.499473</td>\n",
       "      <td>4.658706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>97.293091</td>\n",
       "      <td>103.349637</td>\n",
       "      <td>93.120360</td>\n",
       "      <td>131.361484</td>\n",
       "      <td>106.281143</td>\n",
       "      <td>4.666088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>94.843991</td>\n",
       "      <td>101.066126</td>\n",
       "      <td>94.046357</td>\n",
       "      <td>129.303844</td>\n",
       "      <td>104.815080</td>\n",
       "      <td>4.652198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>112.761126</td>\n",
       "      <td>120.614037</td>\n",
       "      <td>102.250936</td>\n",
       "      <td>150.771227</td>\n",
       "      <td>121.599332</td>\n",
       "      <td>4.800731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>113.238115</td>\n",
       "      <td>111.146043</td>\n",
       "      <td>95.664039</td>\n",
       "      <td>144.080092</td>\n",
       "      <td>116.032072</td>\n",
       "      <td>4.753867</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>97.659483</td>\n",
       "      <td>103.797798</td>\n",
       "      <td>105.363052</td>\n",
       "      <td>135.849658</td>\n",
       "      <td>110.667498</td>\n",
       "      <td>4.706530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>90.449188</td>\n",
       "      <td>87.594994</td>\n",
       "      <td>89.887576</td>\n",
       "      <td>118.984616</td>\n",
       "      <td>96.729094</td>\n",
       "      <td>4.571914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>102.599342</td>\n",
       "      <td>93.287136</td>\n",
       "      <td>92.185481</td>\n",
       "      <td>128.671733</td>\n",
       "      <td>104.185923</td>\n",
       "      <td>4.646177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>108.631924</td>\n",
       "      <td>99.871255</td>\n",
       "      <td>109.032156</td>\n",
       "      <td>140.595641</td>\n",
       "      <td>114.532744</td>\n",
       "      <td>4.740861</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            x1          x2          x3        Area       Media   log_med\n",
       "1   102.913934  103.952749  102.395570  137.565198  111.706863  4.715878\n",
       "2    94.851466  102.976658   83.674077  126.805421  102.076906  4.625727\n",
       "3    87.951811   91.061506   75.888584  114.802853   92.426189  4.526410\n",
       "4   108.096546   95.770205  103.874355  136.558160  111.074816  4.710204\n",
       "5    93.684305   77.731147  110.385315  122.502831  101.075900  4.615872\n",
       "6   117.283423  109.077601  113.797549  151.113029  122.817901  4.810703\n",
       "7   127.018207  108.603230   92.589272  148.673809  119.221130  4.780980\n",
       "8   110.116388   90.885371   79.134532  126.879057  101.753837  4.622557\n",
       "9    93.421087  106.263699   92.434028  130.653736  105.693138  4.660540\n",
       "10   90.896944  109.443367   88.355214  129.621894  104.579355  4.649946\n",
       "11   96.399427   95.468685  102.498855  130.100341  106.116827  4.664541\n",
       "12  111.221945   89.742749   90.413137  130.620059  105.499473  4.658706\n",
       "13   97.293091  103.349637   93.120360  131.361484  106.281143  4.666088\n",
       "14   94.843991  101.066126   94.046357  129.303844  104.815080  4.652198\n",
       "15  112.761126  120.614037  102.250936  150.771227  121.599332  4.800731\n",
       "16  113.238115  111.146043   95.664039  144.080092  116.032072  4.753867\n",
       "17   97.659483  103.797798  105.363052  135.849658  110.667498  4.706530\n",
       "18   90.449188   87.594994   89.887576  118.984616   96.729094  4.571914\n",
       "19  102.599342   93.287136   92.185481  128.671733  104.185923  4.646177\n",
       "20  108.631924   99.871255  109.032156  140.595641  114.532744  4.740861"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# seu código aqui\n",
    "\n",
    "df['log_med'] = np.log(df['Media'])\n",
    "df"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
